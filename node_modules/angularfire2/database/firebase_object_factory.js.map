{"version":3,"file":"firebase_object_factory.js","sourceRoot":"","sources":["../../src/database/firebase_object_factory.ts"],"names":[],"mappings":"OAAO,EAAE,wBAAwB,EAAE,MAAM,SAAS;OAE3C,EAAE,QAAQ,EAAE,MAAM,UAAU;OAC5B,KAAK,KAAK,MAAM,UAAU;AAKjC,sCACE,kBAAwD,EACxD,EAA2D;QAA3D,4BAA2D,EAAzD,sCAAgB,EAAE,gBAAK;IAEzB,IAAI,GAAgC,CAAC;IAErC,KAAK,CAAC,wBAAwB,CAAC,kBAAkB,EAAE;QACjD,KAAK,EAAE,cAAM,OAAA,GAAG,GAAG,QAAQ,EAAE,CAAC,UAAU,CAAS,kBAAkB,CAAC,EAAvD,CAAuD;QACpE,KAAK,EAAE,cAAM,OAAA,GAAG,GAAgC,kBAAkB,EAArD,CAAqD;KACnE,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,wBAAwB,CAAC,UAAC,GAAkB;QACrD,IAAI,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,QAAwC;YAChE,GAAG,CAAC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrE,CAAC,EAAE,UAAA,GAAG;YACJ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,cAAM,OAAA,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,EAApB,CAAoB,CAAC;IACpC,CAAC,EAAE,GAAG,CAAC,CAAC;AACV,CAAC","sourcesContent":["import { FirebaseObjectObservable } from './index';\nimport { Observer } from 'rxjs/Observer';\nimport { database } from 'firebase';\nimport * as utils from '../utils';\nimport { Query } from '../interfaces';\nimport { observeQuery } from './query_observable';\nimport { FirebaseObjectFactoryOpts } from '../interfaces';\n\nexport function FirebaseObjectFactory (\n  absoluteUrlOrDbRef: string | firebase.database.Reference,\n  { preserveSnapshot, query }: FirebaseObjectFactoryOpts = {}): FirebaseObjectObservable<any> {\n\n  let ref: firebase.database.Reference;\n\n  utils.checkForUrlOrFirebaseRef(absoluteUrlOrDbRef, {\n    isUrl: () => ref = database().refFromURL(<string>absoluteUrlOrDbRef),\n    isRef: () => ref = <firebase.database.Reference>absoluteUrlOrDbRef\n  });\n\n  return new FirebaseObjectObservable((obs: Observer<any>) => {\n    let fn = ref.on('value', (snapshot: firebase.database.DataSnapshot) => {\n      obs.next(preserveSnapshot ? snapshot : utils.unwrapMapFn(snapshot))\n    }, err => {\n      if (err) { obs.error(err); obs.complete(); }\n    });\n\n    return () => ref.off('value', fn);\n  }, ref);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}